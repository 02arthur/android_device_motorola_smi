Summary:

- Setup building enviroment for CM10 (needs 64 bits OS)
- Git init my android manifest: repo init -u git://github.com/HazouPH/android.git -b cm-10.1
- Repo sync
- Apply all patches by executing ApplyPatches.sh in device/motorola/smi/patch
- After every new 'Repo sync' u need to repatch the repository with ApplyPatches.sh.

First things first. U need a linux pc for building/compiling roms. So i have a dual-booting pc that normale boots in windows for study and will boot in ubuntu when inserting a special usb i made. Building cost time. I am building on my notebook with an i5 2.4ghz. I takes about 1,5/2 hours for building. U need to get a linux os (x64) first working before continuing. 

Use this guide to set-up a building environment: http://forum.xda-developers.com/showthread.php?t=2224142
Follow it till the part: repo init -u git://github.com/AOKP/platform_manifest.git -b jb. <-- will download the AOKP source code and we want the CM ones. So we need to change that to a modified cm one, mine:

Quote:

repo init -u git://github.com/HazouPH/android.git -b cm-10.1

Than use "Repo sync" in the root of the source code map.
This we download almost 8GB of source code.

After this u need to execute 'ApplyPatches.sh' in device/motorola/smi/patch
This will apply some specific patches for building it. The only way for now.

If it is all completed there are just 3 more steps:

U need to execute 'extract-files.sh' in device/motorola/smi. But for this to work u need to have a map with all the files from a JB rom, like the one from Omar. Then change the line '/home/patrick/razri' in extract-files.sh to the path to the JB source. U needs to point directly to the system files. In my case the map 'razri' contains the system maps/files like: bin, lib, usr, etc. This will get u some vendor files that we can't build or isn't open-source.

Just 1 step before compiling: u need to execute the files 'get-prebuilts' in the map vendor/cm. This will get u the superuser files.

The last step is compiling the source with the commands:

Quote:

. build/envsetup.sh

To get all the possible build variants including our own: cm_smi-userdebug

Quote:

lunch

followed by picking a number. The number must be the cm_smi-userdebug one. In my case it is always 12 or 13.

Quote:

make -j4

Make, does what it says, it will start compiling the source. '-j4' are the threads the make program can use. it is the max number of cpu cores. in my case i have an i5. So 2 cores, but with hyperthreading enabled there are 4 available. So i use 4.

The compiling can take some time and maybe give u some errors. When u have some errors, first look what the errors mean and if u can't get it sorted out, ask me.

When it is completed u will get a system.img, after this use the command "make otapackage" and u will get a flashable zip file that can be flashed in recovery to try. Use logcat to debug the booting!

When you want to check for new updates in the source, use "repo sync" again to get the latest ones. After this execute the "ApplyPatches.sh" again.

A good thing to do is to research the device/motorola/smi and device/motorola/smi-plus directory's. Look what they are doing. In Boarcconfig.mk in a line that needs to be changed. the line 'COMMON_GLOBAL_CFLAGS += -DICS_AUDIO_BLOB' With this line enabled it will make a system.img withs needs the audio files from stock. this methode isn't working right. When outlinging the line with a '#' before it, it will build a testing rom that will boot and work.

If you have more questions, first search on the world wide web then ask me if nessecary.

Hazou
